def task2(economic_packages,uld):
    # economic_packages=[['P-1', 288585, 61, 176], ['P-4', 453600, 73, 138], ['P-5', 326656, 93, 139], ['P-7', 638352, 117, 102], ['P-8', 861840, 142, 108], ['P-11', 356400, 23, 96], ['P-12', 337920, 27, 117], ['P-13', 449790, 41, 73], ['P-14', 167670, 27, 68], ['P-18', 652460, 96, 65], ['P-19', 306153, 73, 107], ['P-21', 782775, 223, 116], ['P-22', 910800, 191, 86], ['P-24', 485595, 123, 69], ['P-25', 179564, 37, 108], ['P-26', 282072, 56, 130], ['P-27', 282534, 18, 122], ['P-28', 492480, 70, 139], ['P-29', 282596, 23, 122], ['P-30', 762960, 164, 70], ['P-31', 264404, 67, 76], ['P-32', 301840, 53, 124], ['P-33', 584730, 132, 136], ['P-34', 317115, 45, 77], ['P-35', 376488, 96, 103], ['P-37', 228684, 33, 131], ['P-39', 374784, 61, 111], ['P-40', 283500, 78, 106], ['P-43', 473688, 87, 109], ['P-44', 164640, 28, 87], ['P-47', 518752, 149, 67], ['P-48', 165360, 33, 67], ['P-51', 475494, 65, 67], ['P-52', 933504, 96, 121], ['P-53', 247192, 14, 74], ['P-54', 318954, 20, 98], ['P-55', 680295, 71, 78], ['P-56', 481780, 77, 85], ['P-57', 313408, 32, 137], ['P-58', 532950, 126, 134], ['P-59', 329035, 26, 111], ['P-60', 443700, 23, 84], ['P-61', 590235, 130, 136], ['P-62', 348128, 25, 84], ['P-63', 439875, 111, 116], ['P-64', 582400, 123, 62], ['P-65', 429000, 56, 121], ['P-66', 202100, 53, 72], ['P-67', 437532, 34, 65], ['P-72', 325028, 79, 66], ['P-74', 438219, 115, 61], ['P-75', 270470, 42, 128], ['P-76', 353280, 81, 123], ['P-77', 312000, 57, 88], ['P-78', 323232, 85, 116], ['P-79', 399900, 61, 91], ['P-80', 160820, 20, 127], ['P-81', 1033230, 94, 116], ['P-84', 483912, 41, 82], ['P-85', 140624, 42, 74], ['P-87', 306234, 84, 116], ['P-88', 460040, 106, 74], ['P-89', 800496, 60, 117], ['P-92', 218660, 59, 138], ['P-93', 550528, 100, 133], ['P-95', 558831, 68, 73], ['P-96', 273000, 40, 68], ['P-97', 261237, 54, 120], ['P-98', 639576, 139, 76], ['P-99', 337960, 28, 108], ['P-100', 539400, 104, 79], ['P-101', 635664, 154, 109], ['P-102', 474880, 70, 135], ['P-104', 812250, 110, 108], ['P-107', 990000, 252, 134], ['P-108', 358610, 95, 90], ['P-110', 756800, 158, 89], ['P-111', 415090, 27, 60], ['P-113', 354750, 88, 87], ['P-114', 773760, 175, 124], ['P-115', 492660, 112, 105], ['P-116', 958982, 132, 128], ['P-118', 553500, 55, 114], ['P-119', 336856, 25, 61], ['P-120', 323232, 82, 105], ['P-121', 682560, 99, 124], ['P-122', 368368, 67, 105], ['P-123', 106640, 7, 75], ['P-124', 404352, 96, 76], ['P-128', 531828, 44, 92], ['P-130', 140400, 18, 79], ['P-131', 518240, 84, 109], ['P-132', 394128, 115, 77], ['P-135', 320760, 56, 132], ['P-137', 623040, 108, 120], ['P-138', 605200, 142, 87], ['P-140', 578760, 60, 119], ['P-143', 869200, 206, 76], ['P-144', 450288, 120, 111], ['P-146', 252000, 46, 92], ['P-149', 294840, 76, 84], ['P-151', 368456, 23, 89], ['P-152', 282606, 44, 109], ['P-153', 202368, 59, 62], ['P-154', 599872, 47, 118], ['P-155', 388455, 95, 99], ['P-156', 377410, 57, 124], ['P-158', 731880, 135, 61], ['P-159', 239200, 15, 66], ['P-160', 876744, 232, 84], ['P-161', 469092, 127, 67], ['P-164', 354960, 99, 124], ['P-166', 536424, 142, 134], ['P-167', 235000, 33, 124], ['P-169', 392544, 102, 136], ['P-170', 356400, 39, 120], ['P-171', 255750, 55, 110], ['P-172', 275196, 22, 112], ['P-173', 663228, 130, 81], ['P-174', 507929, 107, 127], ['P-175', 557568, 127, 121], ['P-176', 379440, 42, 87], ['P-177', 178596, 17, 77], ['P-178', 516672, 97, 98], ['P-179', 285138, 38, 84], ['P-182', 245700, 42, 65], ['P-184', 625152, 129, 84], ['P-185', 281400, 52, 133], ['P-186', 367164, 60, 118], ['P-189', 306936, 66, 121], ['P-190', 567216, 143, 128], ['P-191', 667400, 123, 64], ['P-192', 303696, 33, 106], ['P-193', 419688, 113, 75], ['P-194', 371472, 97, 116], ['P-195', 418608, 62, 90], ['P-196', 451968, 85, 60], ['P-197', 884862, 68, 85], ['P-198', 366744, 68, 113], ['P-200', 454508, 81, 95], ['P-201', 644480, 159, 139], ['P-202', 195520, 57, 105], ['P-203', 670344, 52, 63], ['P-204', 498520, 150, 101], ['P-205', 204920, 24, 107], ['P-206', 115620, 29, 85], ['P-208', 453900, 117, 127], ['P-209', 237600, 57, 74], ['P-210', 368280, 64, 67], ['P-213', 372750, 94, 66], ['P-218', 408870, 63, 134], ['P-220', 324896, 80, 137], ['P-221', 146608, 13, 86], ['P-223', 832324, 145, 66], ['P-225', 341496, 52, 98], ['P-227', 413472, 58, 118], ['P-228', 459816, 128, 75], ['P-229', 581256, 171, 116], ['P-230', 189888, 44, 82], ['P-231', 319872, 48, 91], ['P-233', 423089, 120, 63], ['P-234', 290680, 60, 101], ['P-235', 705600, 61, 95], ['P-237', 724978, 193, 97], ['P-239', 476765, 94, 93], ['P-240', 577720, 84, 127], ['P-241', 478114, 25, 115], ['P-242', 325473, 48, 118], ['P-243', 557865, 98, 76], ['P-244', 353400, 24, 111], ['P-245', 445200, 61, 67], ['P-246', 373320, 58, 106], ['P-247', 480004, 61, 136], ['P-248', 268268, 70, 139], ['P-249', 327965, 66, 88], ['P-250', 391170, 105, 89], ['P-251', 363792, 106, 71], ['P-253', 441441, 99, 98], ['P-254', 398871, 101, 72], ['P-256', 388608, 117, 99], ['P-257', 184518, 40, 103], ['P-258', 320210, 43, 138], ['P-259', 520128, 55, 98], ['P-260', 208593, 20, 65], ['P-261', 323400, 80, 114], ['P-262', 1032884, 99, 65], ['P-263', 455504, 33, 107], ['P-267', 513324, 130, 116], ['P-268', 529200, 99, 95], ['P-269', 240352, 25, 85], ['P-271', 165968, 30, 63], ['P-272', 192000, 54, 133], ['P-276', 196788, 29, 70], ['P-278', 256960, 60, 96], ['P-279', 437580, 118, 101], ['P-281', 485100, 57, 95], ['P-286', 509175, 133, 102], ['P-287', 715176, 94, 110], ['P-288', 579134, 36, 122], ['P-289', 198660, 28, 79], ['P-290', 253920, 23, 64], ['P-291', 239760, 42, 124], ['P-292', 585900, 46, 66], ['P-293', 326144, 78, 81], ['P-294', 360096, 30, 69], ['P-296', 693036, 50, 60], ['P-298', 344344, 57, 83], ['P-301', 303048, 76, 72], ['P-302', 440960, 98, 84], ['P-303', 374604, 75, 85], ['P-305', 193662, 22, 104], ['P-306', 720720, 57, 106], ['P-307', 338496, 100, 123], ['P-308', 401280, 62, 87], ['P-311', 343097, 26, 69], ['P-312', 488880, 121, 120], ['P-313', 265356, 73, 120], ['P-314', 414036, 48, 93], ['P-315', 198750, 14, 104], ['P-316', 767865, 201, 123], ['P-317', 227900, 44, 89], ['P-318', 638550, 47, 89], ['P-321', 542724, 92, 91], ['P-322', 302940, 72, 104], ['P-323', 684432, 183, 129], ['P-324', 111520, 27, 122], ['P-325', 388080, 93, 74], ['P-326', 192780, 17, 136], ['P-327', 244992, 18, 119], ['P-328', 319800, 57, 72], ['P-330', 1079610, 271, 75], ['P-331', 268664, 64, 91], ['P-332', 463809, 63, 108], ['P-334', 347490, 103, 102], ['P-335', 492765, 47, 140], ['P-336', 239904, 33, 114], ['P-337', 314160, 52, 102], ['P-338', 352176, 75, 70], ['P-339', 311904, 80, 94], ['P-340', 454230, 66, 98], ['P-341', 357048, 50, 109], ['P-342', 324324, 83, 85], ['P-343', 552013, 98, 130], ['P-344', 450340, 111, 95], ['P-347', 567630, 96, 116], ['P-348', 383768, 60, 89], ['P-349', 700128, 70, 80], ['P-351', 403604, 42, 112], ['P-354', 254800, 47, 78], ['P-355', 140400, 42, 72], ['P-357', 129920, 15, 110], ['P-358', 359640, 55, 93], ['P-359', 851228, 188, 103], ['P-361', 202215, 55, 68], ['P-362', 393450, 99, 92], ['P-363', 381096, 29, 136], ['P-364', 396440, 29, 94], ['P-367', 394956, 74, 106], ['P-368', 681813, 178, 85], ['P-369', 365400, 92, 110], ['P-371', 227136, 50, 106], ['P-372', 729960, 182, 96], ['P-373', 374976, 108, 105], ['P-374', 580851, 169, 96], ['P-375', 311952, 35, 99], ['P-376', 907889, 73, 96], ['P-377', 933240, 118, 80], ['P-378', 278303, 61, 131], ['P-379', 593096, 58, 77], ['P-380', 142352, 22, 102], ['P-381', 211968, 60, 87], ['P-382', 464916, 41, 130], ['P-383', 525300, 61, 83], ['P-384', 302220, 16, 97], ['P-385', 122880, 23, 113], ['P-386', 450450, 88, 120], ['P-387', 189504, 37, 140], ['P-388', 854667, 88, 134], ['P-389', 335160, 55, 61], ['P-390', 834432, 244, 114], ['P-391', 412815, 71, 122], ['P-392', 219240, 59, 74], ['P-393', 134420, 23, 133], ['P-395', 473040, 112, 107], ['P-396', 466956, 118, 120], ['P-397', 240720, 51, 81], ['P-398', 455260, 68, 130], ['P-399', 176220, 22, 63], ['P-400', 166400, 37, 71]]

    # print("length of economic packages",len(economic_packages))
    # uld = [
    #     ["ULD-1", 224, 318, 162, 2500],
    #     ["ULD-5", 244, 318, 285, 3500],
    #     ["ULD-6", 244, 318, 285, 3500]
    # ]

    total_price=0
    for element in economic_packages:
        total_price+=element[-1]

    total_weight=0
    for element in economic_packages:
        total_weight+=element[2]

    total_volume=0
    for element in economic_packages:
        total_volume+=element[1]

    v=0
    for element in uld:
        v+=element[1]*element[2]*element[3]

    w=0
    for element in uld:
        w+=element[4]

    # print(v,w)

    packages_cost_delay=[]
    for element in economic_packages:
        ans=[]
        ans.append(element[-1])
        ans.append(element[0])
        packages_cost_delay.append(ans)
    packages_cost_delay.sort()

    packages_volume=[]
    for element in economic_packages:
        ans=[]
        ans.append(element[1])
        ans.append(element[0])
        packages_volume.append(ans)
    packages_volume.sort()
    packages_volume.reverse()

    packages_weight=[]
    for element in economic_packages:
        ans=[]
        ans.append(element[2])
        ans.append(element[0])
        packages_weight.append(ans)
    packages_weight.sort()
    packages_weight.reverse()

    selected_packages=economic_packages.copy()

    while((v/(total_volume+1))<1 or (w/(total_weight+1))<1):
        if ((v/total_volume)<(w/total_weight)):
            remove=[]
            common=[]
            l=[]
            for i in range(len(packages_cost_delay)):
                if packages_cost_delay[i][1] not in l:
                    l.append(packages_cost_delay[i][1])
                else:
                    common.append(packages_cost_delay[i][1])
                if packages_volume[i][1] not in l:
                    l.append(packages_volume[i][1])
                else:
                    common.append(packages_volume[i][1])
                if (len(common)==1):
                    break
            remove.append(common)
            for element in economic_packages:
                if common[0]==element[0]:
                    remove=element
            selected_packages.remove(remove)
            packages_cost_delay.remove([remove[3],remove[0]])
            packages_volume.remove([remove[1],remove[0]])
            packages_weight.remove([remove[2],remove[0]])  
            total_price=total_price-remove[-1]
            total_volume=total_volume-remove[1]
            total_weight=total_weight-remove[2]
        else:
            remove=[]
            common=[]
            l=[]
            for i in range(len(packages_cost_delay)):
                if packages_cost_delay[i][1] not in l:
                        l.append(packages_cost_delay[i][1])
                else:
                    common.append(packages_cost_delay[i][1])
                if packages_weight[i][1] not in l:
                    l.append(packages_weight[i][1])
                else:
                    common.append(packages_weight[i][1])
                if (len(common)==1):
                    break
                remove.append(common)
            for element in economic_packages:
                if common[0]==element[0]:
                    remove=element
            selected_packages.remove(remove)
            packages_cost_delay.remove([remove[3],remove[0]])
            packages_volume.remove([remove[1],remove[0]])
            packages_weight.remove([remove[2],remove[0]])
            total_price=total_price-remove[-1]
            total_volume=total_volume-remove[1]
            total_weight=total_weight-remove[2]
    return selected_packages
            






